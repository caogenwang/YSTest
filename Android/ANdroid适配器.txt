1.将各种数据以合适的形式显示在View中给用户看。Adapter有很多的接口、抽象类、子类可以使用，
    这里就我们常用的几个进行讲解。

2. BaseAdapter，ArrayAdapter，SimpleAdapter，为了配合讲解这几个适配器，
    这里提前使用一下ListView来展示一下适配器的使用，后面会对ListView进行进一步总结。

3.ArrayAdapter

        <?xml version="1.0" encoding="utf-8"?>
        <LinearLayout
            xmlns:android="http://schemas.android.com/apk/res/android"
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:orientation="vertical">
            <ListView
                android:id="@+id/ll1"
                android:layout_width="match_parent"
                android:layout_height="wrap_content">
            </ListView>
        </LinearLayout>

        package com.example.test3;

        import android.app.Activity;
        import android.os.Bundle;
        import android.widget.ArrayAdapter;
        import android.widget.ListView;

        public class MainActivity extends Activity{
        //    定义要显示的数据
            private String[] datas = {"张三","李四","王五","麻子","小强"};
            private ArrayAdapter<String> adapter;
            private ListView listView;
            @Override
            protected void onCreate(Bundle savedInstanceState) {
                super.onCreate(savedInstanceState);
                setContentView(R.layout.activity_main);
                listView = (ListView) findViewById(R.id.ll1);
        //        初始化适配器
                adapter = new ArrayAdapter<>(this,android.R.layout.simple_expandable_list_item_1,datas);
                listView.setAdapter(adapter);
            }
        }

4. SimpleAdapter

        <?xml version="1.0" encoding="utf-8"?>
        <LinearLayout
            xmlns:android="http://schemas.android.com/apk/res/android"
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:orientation="vertical">
            <ListView
                android:id="@+id/ll1"
                android:layout_width="match_parent"
                android:layout_height="wrap_content">
            </ListView>
        </LinearLayout>


        <?xml version="1.0" encoding="utf-8"?>
        <LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
                    android:layout_width="wrap_content"
                    android:layout_height="wrap_content"
                    android:orientation="horizontal">
            <ImageView
                android:id="@+id/image1"
                android:layout_width="100dp"
                android:layout_height="100dp"
                android:src="@mipmap/ic_launcher"
                android:layout_margin="5dp"/>
        <LinearLayout
            android:id="@+id/ll2"
            android:layout_width="match_parent"
            android:layout_height="100dp"
            android:orientation="vertical"
            android:layout_marginTop="5dp"
            android:layout_marginLeft="10dp">
            <TextView
                android:id="@+id/text1"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:text="哈哈"
                android:textSize="30sp"
                android:layout_marginTop="10dp"/>
            <TextView
                android:id="@+id/text2"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:text="哈哈哈哈哈"
                android:textSize="24dp"
                android:layout_marginTop="10dp"/>
        </LinearLayout>
        </LinearLayout>

        package com.example.test3;

        import android.app.Activity;
        import android.os.Bundle;
        import android.widget.ListView;
        import android.widget.SimpleAdapter;

        import java.util.ArrayList;
        import java.util.HashMap;
        import java.util.List;
        import java.util.Map;


        public class MainActivity extends Activity{
        //    这三个经常是同时出现的
            private List<Map<String,Object>> lists;
            private SimpleAdapter adapter;
            private ListView listView;
        //    定义数据
            private String[] theme = {"张三","李四","王五"};
            private String[] content ={"我是张三，你好","我是李四，你好","我是王五，你好"};
            private int[] imageViews = {R.mipmap.ic_launcher,R.mipmap.ic_account,R.mipmap.ic_password};
            @Override
            protected void onCreate(Bundle savedInstanceState) {
                super.onCreate(savedInstanceState);
                setContentView(R.layout.activity_main);
                listView = (ListView) findViewById(R.id.ll1);
        //        准备数据源
                lists = new ArrayList<>();
                for(int i = 0;i < theme.length;i++){
                    Map<String,Object> map =new HashMap<>();
                    map.put("image",imageViews[i]);
                    map.put("theme",theme[i]);
                    map.put("content",content[i]);
                    lists.add(map);
                }
                adapter = new SimpleAdapter(MainActivity.this,lists,R.layout.list_item
                        ,new String[]{"image","theme","content"}//注意adapter的样式
                        ,new int[]{R.id.image1,R.id.text1,R.id.text2});
                listView.setAdapter(adapter);
            }
        }
        simpleAdapter中五个参数的

        第一个参数：上下文对象

        第二个参数：数据源是含有Map的一个集合

        第三个参数：每一个item的布局文件

        第四个参数：new String[]{}数组，数组的里面的每一项要与第二个参数中的存入map集合的的key值一样，一一对应

        第五个参数：new int[]{}数组，数组里面的第三个参数中的item里面的控件id。

5. BaseAdapter使用的非常多，现在使用BaseAdapter也同样的实现上面的效果
    （1）布局文件和每一个item的显示都和上面SimpleAdapter一样的主要是在Java里面的文件，
        在使用BaseAdapter我们继承它，并且实现里面抽象方法。自定义adapter.
        
        package com.example.test3;

        import android.content.Context;
        import android.text.Layout;
        import android.view.LayoutInflater;
        import android.view.View;
        import android.view.ViewGroup;
        import android.widget.BaseAdapter;
        import android.widget.ImageView;
        import android.widget.TextView;

        import java.util.ArrayList;
        import java.util.List;

        /**
        * Created by coder-tu on 2016/1/13.
        */
        public class MyAdapter extends BaseAdapter {
            private List<Message> Datas;
            private Context mContext;

            public MyAdapter(List<Message> datas, Context mContext) {
                Datas = datas;
                this.mContext = mContext;
            }

            /**
            * 返回item的个数
            * @return
            */
            @Override
            public int getCount() {
                return Datas.size();
            }

            /**
            * 返回每一个item对象
            * @param i
            * @return
            */
            @Override
            public Object getItem(int i) {
                return Datas.get(i);
            }

            /**
            * 返回每一个item的id
            * @param i
            * @return
            */
            @Override
            public long getItemId(int i) {
                return i;
            }

            /**
            * 暂时不做优化处理，后面会专门整理BaseAdapter的优化
            * @param i
            * @param view
            * @param viewGroup
            * @return
            */
            @Override
            public View getView(int i, View view, ViewGroup viewGroup) {
                view = LayoutInflater.from(mContext).inflate(R.layout.list_item,viewGroup,false);
                ImageView imageView = (ImageView) view.findViewById(R.id.image1);
                TextView textView1 = (TextView) view.findViewById(R.id.text1);
                TextView textView2 = (TextView) view.findViewById(R.id.text2);
                imageView.setImageResource(Datas.get(i).getImageId());
                textView1.setText(Datas.get(i).getTheme());
                textView2.setText(Datas.get(i).getContent());
        //        此处需要返回view 不能是view中某一个
                return view;
            }
        }

        package com.example.test3;

        import android.app.Activity;
        import android.os.Bundle;
        import android.widget.ListView;

        import java.util.ArrayList;
        import java.util.List;


        public class MainActivity extends Activity{
        //    这三个经常是同时出现的
            private List<Message> lists;
            private MyAdapter adapter;
            private ListView listView;
            @Override
            protected void onCreate(Bundle savedInstanceState) {
                super.onCreate(savedInstanceState);
                setContentView(R.layout.activity_main);
                listView = (ListView) findViewById(R.id.ll1);
                lists = new ArrayList<>();
                lists.add(new Message(R.mipmap.ic_launcher,"张三","你好，我是张三"));
                lists.add(new Message(R.mipmap.ic_account,"李四","你好，我是李四"));
                lists.add(new Message(R.mipmap.ic_password,"王五","你好，我是王五"));
                adapter = new MyAdapter(lists,MainActivity.this);
                listView.setAdapter(adapter);
            }
        }

        1、创建内部类 2、判断convertView是否为空 3通过setTag方法将viewHolder与convertView建立关系绑定



        public View getView(int i,View view,ViewGroup viewGroup){
            ViewHolder holer;
            if(view == null){
                holder = new ViewHolder();
                view = LayoutInflater.from(mContext).inflate(R.layout.list_item,viewGroup,false);
                
            }
        }
        class ViewHolder{
            private ImageView image;
            private TextView textView1;
            private TextView textView1;
        }