1. 前言
    Retrofit 是一个 RESTful 的 HTTP 网络请求框架的封装，
    网络请求的工作本质上是 OkHttp 完成，而 Retrofit 仅负责 网络请求接口的封装.

2. 使用步骤
    (1)添加Retrofit库的依赖
            implementation 'com.squareup.retrofit2:retrofit:2.0.2'
            implementation 'com.squareup.retrofit2:converter-gson:2.0.2'
            implementation 'com.google.code.gson:gson:2.8.5'
            implementation 'com.squareup.retrofit2:adapter-rxjava:2.0.2'
        后面三个是可选的，分别是数据解析器和gson，以及rxjava支持的依赖
    (2)创建 用于描述网络请求 的接口
        Retrofit将Http请求 抽象成Java接口：采用 注解 描述网络请求参数 和配置网络请求参数
        public interface GetRequest_Interface {

            @GET("openapi.do?keyfrom=abc&key=2032414398&type=data&doctype=json&version=1.1&q=car")
            Call<Reception> getCall(@Field("name") String name);
            // @GET注解的作用:采用Get方法发送网络请求
         
            // getCall() = 接收网络请求数据的方法
            // 其中返回类型为Call<*>，*是接收数据的类（即上面定义的Translation类）
            // 如果想直接获得Responsebody中的内容，可以定义网络请求返回值为Call<Respo
        (3)创建Retrofit实例
            Retrofit retrofit = new Retrofit.Builder()
                .baseUrl("http://fanyi.youdao.com/") //设置网络请求的Url地址
                .addConverterFactory(GsonConverterFactory.create()) //设置数据解析器
                .addCallAdapterFactory(RxJavaCallAdapterFactory.create())
                .build();
        (4) 发送请求
            请求分为同步请求和异步请求
                    // 创建 网络请求接口 的实例
        GetRequest_Interface request = retrofit.create(GetRequest_Interface.class);
        //对 发送请求 进行封装
        Call<Reception> call = request.getCall("");
        call.enqueue(new Callback<Reception>() {
            //请求成功时回调
            @Override
            public void onResponse(Call<Reception> call, Response<Reception> response) {
                //请求处理,输出结果
                response.body().show();
            }
            //请求失败时候的回调
            @Override
            public void onFailure(Call<Reception> call, Throwable throwable) {
                System.out.println("连接失败");
            }
        });

          //同步请求
        try {
            Response<Reception> response = call.execute();
            response.body().show();
        } catch (IOException e) {
            e.printStackTrace();
        }
