1. string(字符串)
    string是二进制安全的，意思是redis的string包含任数据，比如jpg序列化数据
    最大支持512M
2. hash 哈希类似于map
3. list列表，底层实现是链表，可以在前后插入数据
   arrayList 数组
   linklist  链表
4. set 集合，无序，无重复
5. Zset(sorted set) 有序


1. key:
    (1) 相同的k覆盖
    (2) move key db
    (3) expire key time
    (4) ttl key
    (5) type key
2. string 单值单Value
    (1) APPEND key 单值单Value
    (2) Incr/decr/incrb/decby
    (3)getrange/setrange
    (4)setex/setnx
    (5)mset/mget/msetnx 
3.list
    (1)lpush/rpush/lrange
    (2)lpop/rpop
    (3)lindex
    (4)llen
    (5)lrem key删除N个值
    (6)ltrim key
    (7)rpoplpush 一个表赋给另一个表
    (8) lset key index value 给某个位置赋值
    (9)linsert key before/after
    如果键存在，新增内容
    头尾插入数据效率很高
4. set
    单值多value
    (1) sadd SMEMBERS SISMEMBER 
    (2) scard
    (3) srem
    (4) SRANDMEMBER 随机出几个数
    (5) spop key 
    (6) smove 
    (7) sdiff 差集
    (8) sinter 交集
    (7) sunion 并集
5. hash
    hset/hget/hmset/hmget
    hdel
    hexists
    hkeys/hvals
    hincrby/hincrbyfloat
6.Zset
    (1) zadd/zrange
    (2) zrangebyscore 
    (3) zrem
    (4) zcard/zrank/zcount/zscore
    (5) zrevrange
    (5) zrevrangebyscore


2. 事物：转账
cas乐观锁和悲观锁，在一个队列中，一次性，顺序性，排他性的执行一系列命令。

            case1   正常执行
            case2   放弃事务 之前的命令都舍弃
怎么玩？     case3   全体连坐 命令错了，运行的时候报错，所有的都错
            case4   冤头债主 命令没错，最后运行的时候出错
            case5   watch监控 
            悲观锁： 顾名思义，就是很悲观，每次去拿数据的时候都认为别人会修改，
                    所以每次在拿数据的时候都会上锁，这样别人想拿这个数据就会block直到它拿到锁。
                    传统的关系型数据库里边就用到了很多这种锁机制，比如行锁，表锁等，读锁，写锁等，都是在做操作之前先上锁。
            乐观锁： 顾名思义，就是很乐观，每次去拿数据的时候都认为别人不会修改，所以不会上锁。
                    但是在更新的时候会判断一下在此期间别人有没有去更新这个数据，可以使用版本号等机制。
                    乐观锁适用于多读的应用类型，这样可以提高吞吐量，
                    像数据库如果提供类似于write_condition机制的其实都是提供的乐观锁。
            CAS：   CAS是项乐观锁技术，当多个线程尝试使用CAS同时更新同一个变量时，只有其中一个线程能更新变量的值，
                    而其它线程都失败，失败的线程并不会被挂起，而是被告知这次竞争中失败，并可以再次尝试。
                    CAS是一种非阻塞式的同步方式

命令：
    DISCARD：放弃
    EXEC：执行
    MULTI：开始
    UNWATCH：
    WATCH：

3. 订阅和发布
    是什么：进程间的消息通信模式，发送者（pub）发送消息，订阅者（sub）接收消息。
    命令：
    案例：

4. 主从复制
    master以写为主，slave以读为主
    命令：slave of ip port，每次与master断开，都要执行slave of ip port.
    
    slave原理：
    首次是全量复制，之后是增量复制。

一、string
1. 选择数据类型：
        i.  使用json，需要使用序列化和反序列化
        ii. 使用MGET和MSET进行批量操作
2. 分布式锁
    高并发情况。
    线程1 SETNX procduct:1001 true   //返回1表示加锁成功
    线程2 SETNX procduct:1001 true   //返回0表示加锁成功
    使用完成功后删除这个key--> procduct:1001
    DEL procduct:1001
3. 计数器
    保证原子性，类似于阅读量，redis是单线程，依次执行命令。
    INCR article:readcount:[id]
    GET article:readcount:[id]
4. web集群的session
    SpringSession+Redis实现集群会话共享。
    https://blog.csdn.net/weixin_42500670/article/details/81459955。
5. 分布式系统全局序列号
    INCRBY orderId 1000   //redis 批量生成序列号

二、Hash:
    相当于map，k-v形式。
1. 对象缓存
    HMSET user field1 value field2 value
    HMGET user field1 field2
2. 电商购物车
    1）用户ID为key
    2）商品的ID为filed
    3）商量为value

    购物车操作：
    1) 添加商品->hset cart:1001 10088 1
    2) 增加数量->hincrby cart:1001 10088 1
    3) 商品总数->hlen cart:1001
    4) 删除商品->hdel cart:1001 10088
    4) 获取购物车所有的商品->hgetall cart:1001

    优点：1）同类数据归类整个储存，方便数据管理
         2）想不string操作消耗内存与cpu更小
         3）相比string储存更节省空间
    缺点：1）过期功能不能不能使用在field，只能用在key上
         2）Redis集群架构下不适合大规模使用
            https://www.cnblogs.com/wanghaokun/p/10366689.html
三、List
    1. 常用的数据结构
        1) Stack = lpush + lpop ->FILO
        2) Queue = lpush + rpop ->FIFO
        3) 消息队列阻塞 = LPUSH + BRPOP
    2. 微博和微信公号消息流
        1) lpush 


