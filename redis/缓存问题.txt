1. 缓存穿透
    （1）数据库没有的数据，缓存中也没有。黑客可以利用这个漏洞，对数据库进行攻击可能压垮数据库。
    （2）采用布隆过滤器，将所有可能存在的数据哈希到一个足够大的bitmap中，一个一定不存在的数据会
        被这个bitmap拦截掉，从而避免了对底层存储系统的查询压力。
    （3）如果一个查询返回的结果为空，我们仍然把这个空结果进行缓存，但是它的过期时间会很短，最长不超过五分钟。
        /伪代码
public object GetProductListNew() {
    int cacheTime = 30;
    String cacheKey = "product_list";

    String cacheValue = CacheHelper.Get(cacheKey);
    if (cacheValue != null) {
        return cacheValue;
    }

    cacheValue = CacheHelper.Get(cacheKey);
    if (cacheValue != null) {
        return cacheValue;
    } else {
        //数据库查询不到，为空
        cacheValue = GetProductListFromDB();
        if (cacheValue == null) {
            //如果发现为空，设置个默认值，也缓存起来
            cacheValue = string.Empty;
        }
        CacheHelper.Add(cacheKey, cacheValue, cacheTime);
        return cacheValue;
    }
} 
    
2. 缓存击穿
    （1）key对应的数据存在，但在redis中过期，此时若有大量并发过来请求，这些请求发现缓存过期，一般都会从
    后端DB加载数据并回设到缓存，这个时候大并发的请求可能会瞬间把DB压垮。
    （2）使用互斥锁
        在缓存失效的时候，不是立即去load DB,而是先使用缓存工具的某些带成功返回值的操作去set一个mutex 
        key,当操作返回成功时，再进行load db的操作并回设缓存；否则，就重试整个get缓存的方法。
        我理解是，SETNX代表有线程去数据库中取数据了，取完数据，数据会回设到缓存，所以不用很多线程都去
        数据库获取数据。
        SETNX，是「SET if Not eXists」的缩写，也就是只有不存在的时候才设置，可以利用它来实现锁的效果。

public String get(key) {
      String value = redis.get(key);
      if (value == null) { //代表缓存值过期
          //设置3min的超时，防止del操作失败的时候，下次缓存过期一直不能load db
      if (redis.setnx(key_mutex, 1, 3 * 60) == 1) {  //代表设置成功
               value = db.get(key);
                      redis.set(key, value, expire_secs);
                      redis.del(key_mutex);
              } else {  //这个时候代表同时候的其他线程已经load db并回设到缓存了，这时候重试获取缓存值即可
                      sleep(50);
                      get(key);  //重试
              }
          } else {
              return value;      
          }
 }
3. 缓存雪崩
    （1）当缓存服务器重启或者大量缓存集中在某一时间段失效，这样在失效的时候，也会给后端系统带来很大的压力。
    （2）缓存失效时的雪崩效应对底层系统的冲击非常可怕！大多数系统设计者考虑用加锁或者队列的方式保证来保证不
        会有大量的线程对数据库一次性进行读写，从而避免失效时大量的并发请求落到底层存储系统上。
        还有一个简单方案就时讲缓存失效时间分散开，比如我们可以在原有的失效时间基础上增加一个随机值，比如1-5分钟随机，
        这样每一个缓存的过期时间的重复率就会降低，就很难引发集体失效的事件。

        加锁排队，伪代码如下：

        //伪代码
        public object GetProductListNew() {
            int cacheTime = 30;
            String cacheKey = "product_list";
            String lockKey = cacheKey;

            String cacheValue = CacheHelper.get(cacheKey);
            if (cacheValue != null) {
                return cacheValue;
            } else {
                synchronized(lockKey) {
                    cacheValue = CacheHelper.get(cacheKey);
                    if (cacheValue != null) {
                        return cacheValue;
                    } else {
                    //这里一般是sql查询数据
                        cacheValue = GetProductListFromDB(); 
                        CacheHelper.Add(cacheKey, cacheValue, cacheTime);
                    }
                }
                return cacheValue;
            }
        }
        加锁排队只是为了减轻数据库的压力，并没有提高系统吞吐量。假设在高并发下，缓存重建期间key是锁着的，这是过来1000个请求999个都在阻塞的。同样会导致用户等待超时，这是个治标不治本的方法！

        注意：加锁排队的解决方式分布式环境的并发问题，有可能还要解决分布式锁的问题；线程还会被阻塞，用户体验很差！因此，在真正的高并发场景下很少使用！

        随机值伪代码：

        //伪代码
        public object GetProductListNew() {
            int cacheTime = 30;
            String cacheKey = "product_list";
            //缓存标记
            String cacheSign = cacheKey + "_sign";

            String sign = CacheHelper.Get(cacheSign);
            //获取缓存值
            String cacheValue = CacheHelper.Get(cacheKey);
            if (sign != null) {
                return cacheValue; //未过期，直接返回
            } else {
                CacheHelper.Add(cacheSign, "1", cacheTime);
                ThreadPool.QueueUserWorkItem((arg) -> {
            //这里一般是 sql查询数据
                    cacheValue = GetProductListFromDB(); 
                //日期设缓存时间的2倍，用于脏读
                CacheHelper.Add(cacheKey, cacheValue, cacheTime * 2);                 
                });
                return cacheValue;
            }
        } 

        解释说明：

        缓存标记：记录缓存数据是否过期，如果过期会触发通知另外的线程在后台去更新实际key的缓存；
        缓存数据：它的过期时间比缓存标记的时间延长1倍，例：标记缓存时间30分钟，数据缓存设置为60分钟。这样，当缓存标记key过期后，实际缓存还能把旧数据返回给调用端，直到另外的线程在后台更新完成后，才会返回新缓存。
        关于缓存崩溃的解决方法，这里提出了三种方案：使用锁或队列、设置过期标志更新缓存、为key设置不同的缓存失效时间，还有一种被称为“二级缓存”的解决方法。

4. 缓存与数据库数据库一致性
    （1）假设先写数据库，再淘汰缓存：第一步写数据库操作成功，第二步淘汰缓存失败，
    则会出现DB中是新数据，Cache中是旧数据，数据不一致.
    （2）假设先淘汰缓存，再写数据库：第一步淘汰缓存成功，第二步写数据库失败。
    （3）解决方法1：先删除缓存，再修改数据库，如果数据库更新失败，那么数据库中是旧数据，缓存中空的，
        那么数据不会不一致。从数据库读出数据，再回设到缓存中。延时双删。数据库更新后，再去删除一次
        缓存。
    （4）解决方法2：串行化。用队列去控制访问缓存和数据库。