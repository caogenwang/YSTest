c++中浅复制与深复制
在C++中经常会遇到有关类对象的浅复制与深复制的问题，也是容易出错的地方。

查找了相关资料，有关浅复制与深复制的定义为：对类进行复制的时候按位复制，即把一个对象各数据成员的值原样复制到目标对象中。当类中涉及到指针类型数据成员的时候，往往就会产生指针悬挂问题。

复制代码
class A{
public:
    int* a;
};
A a1;
A b1=a1;
复制代码
b1=a1执行的是浅复制，此时a1.a和b1.a指向的是同一个内存地址，如果在析构函数里面有对内存的释放。就会出现内存访问异常。因为一块内存空间会被释放两次！
参考代码理解：
复制代码
#include <iostream>
#include <string.h>
using namespace std;
class person{
private:
    char *name;
    int age;
public:
    person(const char *Name,int Age)
    {
        name=new char[strlen(Name)+1];
        strcpy(name,Name);
        age=Age;
        cout<<"construct ..."<<endl;
    }
    ~person()
    {
        cout<<"destruct ..."<<age<<endl;
        delete name;
    }
    void dispaly()
    {
        cout<<name<<" "<<age<<endl;
    }
    void setage(int x)
    {
        age=x;
    }
};
int main()
{
   person p1("jack",23);
   person p2=p1;
   p1.setage(10);
//   p2.setage(20);
   p1.dispaly();
   p2.dispaly();
    return 0;
}
复制代码


从运行结果我们可以看到程序只是调用了一次构造函数，但是却执行了两次析构函数，不符合预期期望。对象p2=p1执行的是浅复制，p2中指针name和p1中指针name是指向的同一地址，由于没有定义构造函数，在执行p2=p1的时候，系统采用默认拷贝构造函数(默认的拷贝构造函数不会为新对象重新分配新的内存空间)，即按位的拷贝方式将p1中各数据成员的值拷贝到p2的对应成员中，所以导致p1.name=p2.name（指向了同一内存），此时类person的构造函数只会执行一次。

当遇到main()函数最后的“}”的时候，执行析构函数，由析构函数执行的规律可知先构造的后执行，所以先执行p2的析构函数，此时系统将p2.name指向的存储单元释放，在执行p1析构函数的时候，p1.name所指向的内存单元又被释放，这样就会造成同一块内存空间被释放两次，造成错误，p1.name也就成了悬挂指针。

　　解决这一问题就需要对p1进行深拷贝，即构造拷贝函数，让对象p2在拷贝p1的时候获取新的内存空间。

 

复制代码
#include <iostream>
#include <string.h>
using namespace std;

class person{
private:
    char *name;
    int age;
public:
    person(const char *Name,int Age)//构造函数
    {
        name=new char[strlen(Name)+1];
        strcpy(name,Name);
        age=Age;
        cout<<"construct ..."<<endl;
    }
    person(const person &p)//拷贝构造函数
    {
        name=new char[strlen(p.name)+1];
        strcpy(name,p.name);
        age=p.age;
        cout<<"copy construct ..."<<endl;
    }
    ~person()
    {
        cout<<"destruct ..."<<age<<endl;
        delete name;
    }
    void dispaly()
    {
        cout<<name<<" "<<age<<endl;
    }
    void setage(int x)
    {
        age=x;
    }
};
int main()
{
   person p1("jack",23);
   person p2=p1;
   p1.setage(10);
//   p2.setage(20);
   p1.dispaly();
   p2.dispaly();
    return 0;
}
复制代码


从运行结果可以看到符合预期期望，从拷贝构造函数定义可以知道，对类对象的复制，重新为新对象分配了新的内存单元。深拷贝和浅拷贝可以简单理解为：如果一个类拥有资源，当这个类的对象发生复制过程的时候，资源重新分配，这个过程就是深拷贝，反之，没有重新分配资源，就是浅拷贝。

定义拷贝构造函数的形式为：X(X& x){ a=new ••••••}

 

什么时候用到拷贝函数？

  a.一个对象以值传递的方式传入函数体； 
  b.一个对象以值传递的方式从函数返回；
  c.一个对象需要通过另外一个对象进行初始化。
 